# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:13:12+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class BetDelayed(BaseModel):
    delayPeriodSeconds: int = Field(
        ...,
        description='The delay time period of the bet in seconds. The resubmission of the bet has to wait for the length of time (in seconds) returned in the delayPeriod before submitting the second request.',
    )
    delayedBetId: str = Field(
        ...,
        description='The unique identifier of the delayed bet. After the initial response is received, containing the delayPeriod and the delayBetId, the request is then resubmitted using the same delayBetId token that came in that initial response. Check the example below to see how to resend a delayed bet payload.',
    )
    id: str = Field(..., description='The number of the bet')
    number: Optional[float] = Field(
        None, description='Number of the bet if this is part of a multiple bet'
    )


class BetDelayedResponse(RootModel[List[BetDelayed]]):
    root: List[BetDelayed] = Field(..., title='delayedBets')


class BetPlaced(BaseModel):
    id: Optional[str] = Field(None, description='The bet id')
    numLines: Optional[int] = Field(
        None, description='The number of lines the bet consists of'
    )
    number: Optional[float] = Field(
        None, description='Number of the bet if this is part of a multiple bet'
    )
    placedDateTime: Optional[str] = Field(
        None,
        description='The time the bet was placed. For example: 2013-01-30TT13:34:20. The value of this element can be replaced with the current timestamp if it was missing.',
    )
    receipt: str = Field(..., description='The unique ID of the bet receipt')
    totalStake: Optional[float] = Field(
        None, description='The total amount staked on the bet'
    )


class BetPlacedResponse(RootModel[List[BetPlaced]]):
    root: List[BetPlaced] = Field(..., title='placedBets')


class Betslippart(BaseModel):
    eachWayAvailable: Optional[bool] = Field(
        None, description='Indicates whether each way is available'
    )
    includeInMultiple: bool = Field(
        ..., description='Indicates if the bet can be used in a multiple bet'
    )
    legGroup: Optional[int] = Field(
        None,
        description='To organise a number of outcome selections into one or more bet groups, such as a Single bet, a Double bet, a Trixie, etc',
    )
    priceChanged: Optional[bool] = Field(
        None, description='Indicates if there has been a change in the price'
    )
    priceDen: int = Field(
        ...,
        description='Price denominator - will be ignored for types other than L (Fixed Price)',
    )
    priceNum: int = Field(
        ...,
        description='Price numerator - will be ignored for types other than L (Fixed Price)',
    )
    priceType: int = Field(
        ..., description='The type of price selected. For example - ‘L’ (Fixed)'
    )
    selectionId: int = Field(..., description='The selection identifier')
    singleAvailable: Optional[bool] = Field(
        None, description='Indicates whether the bet can be used in a single bet'
    )
    startingPriceAvailable: Optional[bool] = Field(
        None, description='Indicates whether starting prices are available'
    )
    status: Optional[constr(pattern=r'(A|S)')] = Field(
        None, description='Indicates the current status of the bet'
    )
    statusChanged: Optional[bool] = Field(
        None, description='Indicates whether the status of the bet has changed'
    )


class CashInResponse(BaseModel):
    success: bool = Field(
        ..., description='Indicates whether the bet has been cashed-in.'
    )


class FreeBetDetail(BaseModel):
    awardDateTime: Optional[str] = Field(
        None,
        description='The time the free bet was awarded. For example 2014-11-013T23:59:10',
    )
    displayText: Optional[str] = Field(
        None,
        description='The message explaining the offer displayed to the customer along with the free bet',
    )
    expiryDateTime: Optional[str] = Field(
        None,
        description='The time the free bet expired. For example 2014-11-013T23:59:10',
    )
    id: int = Field(..., description='The identifier of the free bet')
    offerDesc: Optional[str] = Field(
        None,
        description='The description of the offer that enabled the customer to place a free bet',
    )
    offerId: Optional[int] = Field(None, description='The identifier of the offer')
    offerName: str = Field(
        ...,
        description='The name of the offer that enabled the customer to place a free bet',
    )
    startDateTime: Optional[str] = Field(
        None,
        description='The time the free bet offer started. For example 2014-11-013T23:59:10',
    )
    value: float = Field(..., description='The value of the free bet')


class Part(BaseModel):
    includeInMultiple: bool = Field(
        ..., description='Indicates if the bet can be used in a multiple bet'
    )
    priceDen: int = Field(
        ...,
        description='Price denominator - will be ignored for types other than L (Fixed Price)',
    )
    priceNum: int = Field(
        ...,
        description='Price numerator - will be ignored for types other than L (Fixed Price)',
    )
    priceType: int = Field(
        ..., description='The type of price selected. For example - ‘L’ (Fixed)'
    )
    selectionId: int = Field(..., description='The selection identifier')


class PriceFormatted(BaseModel):
    american: Optional[str] = Field(None, description='The price in American format')
    decimal: Optional[float] = Field(
        None, description='The decimal format of the price'
    )
    fractional: Optional[str] = Field(
        None,
        description='The fractional format of the price or EVS when the price evens.',
    )


class SingleBetRequestBody(BaseModel):
    delayedBetId: Optional[str] = Field(None, description='The delayed bet identifier')
    freeBetId: Optional[str] = Field(
        None,
        description='The ID number of the free bet token if used in conjunction with this bet',
    )
    priceDen: Optional[int] = Field(
        None,
        description='When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2',
    )
    priceNum: Optional[int] = Field(
        None,
        description='When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2',
    )
    priceType: constr(pattern=r'^(L|S|G)$') = Field(
        ...,
        description='The type of price taken by the customer when the bet is made. Can be one of the following: L - Live Fixed price, S - Starting price - Horse and Greyhound racing or G - Guaranteed best price.',
    )
    selectionId: constr(pattern=r'^(OB_OU\d+)$') = Field(
        ..., description='The unique ID for the selection of the bet'
    )
    stake: float = Field(..., description='The amount of the stake placed on the bet')
    type: constr(pattern=r'^(W|E)$') = Field(
        ...,
        description='The type of bet placed. Can be one of the following: W - Win or E- EachWay',
    )


class Solution(BaseModel):
    betNum: Optional[str] = Field(None, description='The bet number')
    eventId: Optional[constr(pattern=r'^(OB_EV\d+)$')] = Field(
        None, description='The identifier of the event'
    )
    handicap: Optional[str] = Field(None, description='The updated handicap')
    handicapPrecision: Optional[str] = Field(None, description='The handicap precision')
    priceDen: Optional[str] = Field(
        None,
        description='When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2',
    )
    priceNum: Optional[str] = Field(
        None,
        description='When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2',
    )
    selectionHandicap: Optional[str] = Field(None, description='The selection handicap')
    selectionId: Optional[constr(pattern=r'^(OB_OU\d+)$')] = Field(
        None, description='The identifier of the selection'
    )


class Fields(RootModel[List[str]]):
    root: List[str]


class Include(RootModel[List[str]]):
    root: List[str]


class Exclude(RootModel[List[str]]):
    root: List[str]


class Betslipleg(BaseModel):
    parts: List[Betslippart]
    sort: Optional[str] = Field(
        None,
        description='The leg sort. This element is present for complex bets but not for single bets.',
    )
    type: str = Field(
        ...,
        description='Type of leg that was placed on the bet, such as Win or Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.',
    )


class Error(BaseModel):
    code: Optional[str] = Field(
        None, description='A unique William Hill identifier for the error'
    )
    field: Optional[str] = Field(
        None,
        description='To help pinpoint the exact parameter where a request has failed',
    )
    message: Optional[str] = Field(
        None,
        description='A unique William Hill text string to enable you to identify the error (in English only)',
    )
    solution: Optional[Solution] = None


class Errors(BaseModel):
    errors: Optional[List[Error]] = None


class FreeBet(RootModel[List[FreeBetDetail]]):
    root: List[FreeBetDetail]


class Leg(BaseModel):
    parts: List[Part]
    sort: Optional[str] = Field(
        None,
        description='The leg sort. This element is present for complex bets but not for single bets.',
    )
    type: str = Field(
        ...,
        description='The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.',
    )


class PlacedBetPart(BaseModel):
    description: str = Field(..., description='Human-friendly description of the bet')
    eachWayDen: Optional[int] = Field(
        None,
        description='When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2',
    )
    eachWayNum: Optional[int] = Field(
        None,
        description='When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2',
    )
    eachWayPlaces: Optional[int] = Field(
        None, description='The Each-way places available for the bet'
    )
    eventDescription: str = Field(..., description='The description of the event')
    eventId: constr(pattern=r'^(OB_EV\d+)$') = Field(
        ..., description='Unique identifier of the event'
    )
    eventMarketDescription: Optional[str] = Field(
        None, description='The description of the market within an event'
    )
    eventTypeDescription: Optional[str] = Field(
        None, description='The description of type of the event'
    )
    handicap: Optional[float] = Field(
        None,
        description='Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)',
    )
    number: int = Field(..., description='The number of the bet')
    priceDen: int = Field(
        ...,
        description='When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2',
    )
    priceFormatted: Optional[PriceFormatted] = None
    priceNum: int = Field(
        ...,
        description='When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2',
    )
    priceType: str = Field(
        ...,
        description='The price type chosen when the bet was placed. For example: L (Win)',
    )
    result: str = Field(
        ...,
        description='The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available',
    )
    rule4Deductions: Optional[float] = Field(
        None,
        description='The official scale of deductions that apply when a runner is withdrawn',
    )
    selectionId: Optional[constr(pattern=r'^(OB_OU\d+)$')] = Field(
        None, description='Unique identifier of the selection'
    )
    startDateTime: str = Field(
        ..., description='Time the event will start. For example: 2013-01-30 11:01:01'
    )


class Bet(BaseModel):
    delayedBetId: Optional[str] = Field(None, description='The delayed bet identifier')
    freeBetId: Optional[str] = Field(
        None,
        description='The ID number of the free bet token if used in conjunction with this bet',
    )
    legs: List[Leg]
    number: int = Field(..., description='The bet number')
    stake: float = Field(..., description='The amount of the stake placed on the bet')
    typeCode: str = Field(
        ..., description='The bet type code of the bet. For example: TBL (Treble)'
    )


class BetSlipRequest(BaseModel):
    legs: Optional[List[Leg]] = None


class Betslipbet(BaseModel):
    betMultiplier: Optional[float] = Field(
        None,
        description='The total aggregated odds, as a decimal, of the multiple bet placed',
    )
    freeBets: Optional[List[FreeBetDetail]] = Field(
        None, description='Free bets that can be used with this bet'
    )
    legs: List[Betslipleg]
    maxStake: Optional[float] = Field(
        None,
        description='Maximum stake allowable on the bet. For example: 2500.00 (GBP)',
    )
    minStake: Optional[float] = Field(
        None, description='Minumum stake allowable on the bet. For example: 0.05 (GBP)'
    )
    numLines: Optional[float] = Field(
        None, description='The number of lines (selections) of a bet'
    )
    number: int = Field(..., description='The bet number')
    typeCode: str = Field(
        ..., description='The bet type code of the bet. For example: TBL (Treble)'
    )
    typeName: Optional[str] = Field(
        None, description='The TypeCode of the bet. For example: TBL (Treble)'
    )


class ComplexBetRequestBody(BaseModel):
    bets: Optional[List[Bet]] = Field(None, description='A collection of bets')


class PlacedBetLeg(BaseModel):
    number: int = Field(..., description='The leg number of the bet')
    parts: List[PlacedBetPart]
    sort: Optional[str] = Field(
        None,
        description='The leg sort. This element is present for complex bets but not for single bets.',
    )
    type: str = Field(
        ...,
        description='The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.',
    )


class BetSlipResponse(BaseModel):
    betslip: Optional[List[Betslipbet]] = None


class PlacedBet(BaseModel):
    cashinValue: Optional[float] = Field(
        None,
        description='The cash in value of the bet. For example £0.88. When no value is given or no value is present, no cash in is available',
    )
    estimatedReturns: float = Field(
        ...,
        description='The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field.',
    )
    freeBetValue: Optional[float] = Field(
        None,
        description='If a free bet token is used for the bet, this element represents the value',
    )
    id: str = Field(..., description='The unique identifier of the bet')
    legs: Optional[List[PlacedBetLeg]] = None
    numLines: Optional[int] = Field(None, description='Number of lines of bets')
    numSelections: Optional[int] = Field(
        None, description='Number of selections that the bet is made of'
    )
    receipt: Optional[str] = Field(
        None, description='The unique identifier of the receipt for the bet'
    )
    settled: bool = Field(..., description='Whether the bet is settled')
    stake: float = Field(
        ...,
        description='The bet stake, which represents the total value of the bet. For example: £ 12.34',
    )
    stakePerLine: Optional[float] = Field(
        None,
        description='The individual stake on each line of the bet. For example: £ 6.17',
    )
    status: str = Field(
        ...,
        description='The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out',
    )
    transDateTime: str = Field(..., description='The time the bet was placed')
    typeCode: str = Field(
        ..., description='The bet type code of the bet. For example: TBL (Treble)'
    )
    typeName: str = Field(
        ..., description='The name of the bet type. For example: Double'
    )
    winnings: float = Field(
        ..., description='Actual value of the returns from this bet'
    )


class HistoryBets(RootModel[List[PlacedBet]]):
    root: List[PlacedBet]


class BetHistoryResponse(BaseModel):
    bets: Optional[HistoryBets] = None
